# -*- coding: utf-8 -*-
"""Medimapper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-6f0R5BDv99y9qxlV3RsD8FZ31EJr2JW
"""

import pandas as pd

r=pd.read_csv("Training.csv")

r.head()

r.tail()

r.describe()

#r.isnull().sum()

#r.columns

len(r['prognosis'].unique())

x=r.drop('prognosis',axis=1)
y=r['prognosis']

from sklearn.model_selection import train_test_split #spilt dataset

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=8)

#x_train.shape

#x_test.shape

#y_train.shape

#y_test.shape

from sklearn.svm import SVC

model=SVC()

model.fit(x_train,y_train)

y1=model.predict(x_train)  #making predictions on x_train,x_test
y2=model.predict(x_test)

from sklearn.metrics import f1_score
acc=f1_score(y_train,y1,average='micro')
acc1=f1_score(y_test,y2,average='micro')
print("training accuracy:",acc)
print("testing accuracy:",acc1)

from sklearn.metrics import confusion_matrix,classification_report
a=confusion_matrix(y_test,y2)
print("confusion_matrix:",a)
b=classification_report(y_test,y2)
print("classification matrix:",b)

from sklearn.ensemble import RandomForestClassifier

model1=RandomForestClassifier()

model1.fit(x_train,y_train)

p=model1.predict(x_train)
p1=model.predict(x_test)

from sklearn.metrics import accuracy_score

per=accuracy_score(y_train,p)
per1=accuracy_score(y_test,p1)

print("training accuracy:",per)
print("testing accuracy:",per1)

print("\nConfusion Matrix:")
print(confusion_matrix(y_test,p1))

print("\nClassification Report:")
print(classification_report(y_test,p1))

from sklearn.linear_model import LogisticRegression

model2=LogisticRegression()

model2.fit(x_train,y_train)

m=model2.predict(x_train)
m1=model2.predict(x_test)

acc3=accuracy_score(y_train,m)
acc4=accuracy_score(y_test,m1)

print("training accuracy:",acc3)
print("testing accuracy:",acc4)

print("\nConfusion Matrix:")
print(confusion_matrix(y_test,m1))

print("\nClassification Report:")
print(classification_report(y_test,m1))

models = {
    'Logistic Regression': model2,
    'Random Forest': model1,
    'Support Vector Classifier':model,
    }
# Initialize a dictionary to store accuracies
accuracies = {}
# Iterate over models
for name, model in models.items():
    # Make predictions on the testing set
    y_pred = model.predict(x_test)
    # Calculate accuracy and store it
    acc = accuracy_score(y_test, y_pred)
    accuracies[name] = acc

# Print accuracies
for name, acc in accuracies.items():
    print(f'{name} Accuracy:', acc)

import pickle

# Save the trained model
with open('model1.pkl', 'wb') as file:
    pickle.dump(model1, file)

print("model saved successfully.")

import pickle

# Load the saved model
with open('model1.pkl', 'rb') as file:
    loaded_rf_model = pickle.load(file)

print("model loaded successfully.")

#test 1
prediction1 = model1.predict(x_test.iloc[[0]])
print("Predicted Label :",prediction1)
print("Actual Label :",y_test.iloc[0])

#test 2
prediction1 = model1.predict(x_test.iloc[[10]])
print("Predicted Label :",prediction1)
print("Actual Label :",y_test.iloc[10])

#test 3
prediction1 = model1.predict(x_test.iloc[[13]])
print("Predicted Label :",prediction1)
print("Actual Label :",y_test.iloc[13])

r1=pd.read_csv("Symptom-severity.csv")
r2=pd.read_csv("description.csv")
r4=pd.read_csv("diets.csv")                                                #reading all required files
r3=pd.read_csv("medications.csv")
r5=pd.read_csv("precautions_df.csv")
r6=pd.read_csv("symtoms_df.csv")
r7=pd.read_csv("workout_df.csv")

r1.head()

r2.head()

r3.head()

r4.head()

r5.head()

r6.head()

r7.head()

# Define the symptoms dictionary
symptoms_dict = {'itching': 0, 'skin_rash': 1, 'nodal_skin_eruptions': 2, 'continuous_sneezing': 3, 'shivering': 4, 'chills': 5, 'joint_pain': 6, 'stomach_pain': 7, 'acidity': 8, 'ulcers_on_tongue': 9, 'muscle_wasting': 10, 'vomiting': 11, 'burning_micturition': 12, 'spotting_ urination': 13, 'fatigue': 14, 'weight_gain': 15, 'anxiety': 16, 'cold_hands_and_feets': 17, 'mood_swings': 18, 'weight_loss': 19, 'restlessness': 20, 'lethargy': 21, 'patches_in_throat': 22, 'irregular_sugar_level': 23, 'cough': 24, 'high_fever': 25, 'sunken_eyes': 26, 'breathlessness': 27, 'sweating': 28, 'dehydration': 29, 'indigestion': 30, 'headache': 31, 'yellowish_skin': 32, 'dark_urine': 33, 'nausea': 34, 'loss_of_appetite': 35, 'pain_behind_the_eyes': 36, 'back_pain': 37, 'constipation': 38, 'abdominal_pain': 39, 'diarrhoea': 40, 'mild_fever': 41, 'yellow_urine': 42, 'yellowing_of_eyes': 43, 'acute_liver_failure': 44, 'fluid_overload': 45, 'swelling_of_stomach': 46, 'swelled_lymph_nodes': 47, 'malaise': 48, 'blurred_and_distorted_vision': 49, 'phlegm': 50, 'throat_irritation': 51, 'redness_of_eyes': 52, 'sinus_pressure': 53, 'runny_nose': 54, 'congestion': 55, 'chest_pain': 56, 'weakness_in_limbs': 57, 'fast_heart_rate': 58, 'pain_during_bowel_movements': 59, 'pain_in_anal_region': 60, 'bloody_stool': 61, 'irritation_in_anus': 62, 'neck_pain': 63, 'dizziness': 64, 'cramps': 65, 'bruising': 66, 'obesity': 67, 'swollen_legs': 68, 'swollen_blood_vessels': 69, 'puffy_face_and_eyes': 70, 'enlarged_thyroid': 71, 'brittle_nails': 72, 'swollen_extremeties': 73, 'excessive_hunger': 74, 'extra_marital_contacts': 75, 'drying_and_tingling_lips': 76, 'slurred_speech': 77, 'knee_pain': 78, 'hip_joint_pain': 79, 'muscle_weakness': 80, 'stiff_neck': 81, 'swelling_joints': 82, 'movement_stiffness': 83, 'spinning_movements': 84, 'loss_of_balance': 85, 'unsteadiness': 86, 'weakness_of_one_body_side': 87, 'loss_of_smell': 88, 'bladder_discomfort': 89, 'foul_smell_of urine': 90, 'continuous_feel_of_urine': 91, 'passage_of_gases': 92, 'internal_itching': 93, 'toxic_look_(typhos)': 94, 'depression': 95, 'irritability': 96, 'muscle_pain': 97, 'altered_sensorium': 98, 'red_spots_over_body': 99, 'belly_pain': 100, 'abnormal_menstruation': 101, 'dischromic _patches': 102, 'watering_from_eyes': 103, 'increased_appetite': 104, 'polyuria': 105, 'family_history': 106, 'mucoid_sputum': 107, 'rusty_sputum': 108, 'lack_of_concentration': 109, 'visual_disturbances': 110, 'receiving_blood_transfusion': 111, 'receiving_unsterile_injections': 112, 'coma': 113, 'stomach_bleeding': 114, 'distention_of_abdomen': 115, 'history_of_alcohol_consumption': 116, 'fluid_overload.1': 117, 'blood_in_sputum': 118, 'prominent_veins_on_calf': 119, 'palpitations': 120, 'painful_walking': 121, 'pus_filled_pimples': 122, 'blackheads': 123, 'scurring': 124, 'skin_peeling': 125, 'silver_like_dusting': 126, 'small_dents_in_nails': 127, 'inflammatory_nails': 128, 'blister': 129, 'red_sore_around_nose': 130, 'yellow_crust_ooze': 131}

import streamlit as st
import numpy as np
# Define a function to predict disease based on user symptoms

def predict_disease_from_text(user_symptoms_text, model1, symptoms_dict):
    # Initialize feature vector with zeros
    feature_vector = np.zeros(len(symptoms_dict))

    # Check if the user input is empty
    if not user_symptoms_text:
        st.error("Please provide at least one symptom.")
        return None

    # Split user symptoms text into individual symptoms
    user_symptoms=list()
    user_symptoms = user_symptoms_text.split(',')

    for symptom in user_symptoms:
        symptom.lower()
        symptom = symptom.strip().replace(" ","_")  # Remove leading/trailing whitespaces
        if symptom not in symptoms_dict:
            st.error(f"Symptom '{symptom}' is not recognized.")
            return None
        else:
            # Find the index of the symptom in the symptoms dictionary
            index = symptoms_dict[symptom]
            # Set the corresponding entry in the feature vector to 1
            feature_vector[index] = 1

   # Make a prediction using the model
        predicted_disease = model1.predict([feature_vector])[0]

        return predicted_disease

# Function to load data and models
def load_data():
    # Load your models and data here
    pass

# Main function
def main():
    st.title("MEDIMAPPER")
    st.write("Navigating Healthcare Data for Precision Medicine")

    # Load data and models
    load_data()

    # Symptoms input
    user_symptoms_text = st.text_input("Enter your symptoms separated by commas:",placeholder="skin_rash")

    # Predict disease upon button click
    if st.button("Predict"):
        # Call prediction function
        predicted_disease = predict_disease_from_text(user_symptoms_text, model1, symptoms_dict)

        if predicted_disease is not None:
            # Display predicted disease
            st.write("Predicted Disease:", predicted_disease)

            # Display disease description
            description = r2[r2['Disease'] == predicted_disease]['Description'].values
            st.write("Description:", description)

            # Display medication
            medication = r3[r3['Disease'] == predicted_disease]['Medication'].values
            st.write("Medication:", medication)

            # Display precautions
            precautions = r5[r5['Disease'] == predicted_disease][['Precaution_1', 'Precaution_2', 'Precaution_3', 'Precaution_4']].values
            st.write("Precautions:", precautions)

            # Display diet
            diet = r4[r4['Disease'] == predicted_disease]['Diet'].values
            st.write("Diet:", diet)

if __name__ == "__main__":
    main()
